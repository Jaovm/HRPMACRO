import streamlit as st
import pandas as pd
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Otimiza√ß√£o de Carteira Inteligente", layout="wide", initial_sidebar_state="expanded")

# ====== CABE√áALHO ======
st.title("\U0001F4C8 Otimiza√ß√£o e Sugest√£o de Carteira")
st.markdown("""
Este painel permite:
- **An√°lise macroecon√¥mica autom√°tica** com dados do BCB e do mercado.
- **Filtragem de a√ß√µes** com base em cen√°rio, pre√ßo-alvo e exporta√ß√£o.
- **Otimiza√ß√£o de carteira** via Sharpe e HRP.
---
""")

# ====== SIDEBAR ======
with st.sidebar:
    st.header("\U0001F9ED Navega√ß√£o")
    pagina = st.radio("Selecione a etapa:", [
        "\U0001F4CC Introdu√ß√£o",
        "\U0001F310 An√°lise Macroecon√¥mica",
        "\U0001F4C9 Otimiza√ß√£o da Carteira",
        "\U0001F4B5 Sugest√£o de Aporte",
        "\u2705 Ranking de A√ß√µes"
    ])
    st.markdown("---")
    st.caption("Desenvolvido por [Seu Nome] üíº")

# ====== FUN√á√ïES AUXILIARES (Defina estas fun√ß√µes em outro arquivo e importe) ======
# obter_macro()
# classificar_cenario_macro(macro)
# filtrar_ativos_validos(tickers, cenario, macro)
# otimizar_carteira_sharpe(tickers)
# otimizar_carteira_hrp(tickers)

# ====== FUN√á√ÉO PRINCIPAL ======
def painel_inteligente():
    if pagina == "\U0001F4CC Introdu√ß√£o":
        st.subheader("Bem-vindo(a) √† Otimiza√ß√£o Inteligente de Carteira")
        st.markdown("""
        Este painel utiliza **dados macroecon√¥micos atualizados**, **pre√ßo-alvo dos analistas**, e t√©cnicas modernas como **Hierarchical Risk Parity (HRP)** e **Otimiza√ß√£o por Sharpe** para te ajudar a:

        - **Identificar oportunidades de compra**
        - **Sugerir aloca√ß√µes para novos aportes**
        - **Otimizar sua carteira com base no cen√°rio econ√¥mico atual**
        ---
        """)

    elif pagina == "\U0001F310 An√°lise Macroecon√¥mica":
        st.subheader("\U0001F30E Cen√°rio Macroecon√¥mico Atual")
        with st.spinner("Carregando dados macroecon√¥micos..."):
            macro = obter_macro()
            cenario = classificar_cenario_macro(macro)

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Selic", f"{macro['selic']:.2f}%")
        col2.metric("IPCA", f"{macro['ipca']:.2f}%")
        col3.metric("D√≥lar", f"R$ {macro['dolar']:.2f}")
        col4.metric("Petr√≥leo", f"US$ {macro['petroleo']:.2f}")

        st.success(f"Cen√°rio Macroecon√¥mico Classificado como: `{cenario}`")

    elif pagina == "\U0001F4C9 Otimiza√ß√£o da Carteira":
        st.subheader("\u2696\ufe0f Otimiza√ß√£o com HRP")
        carteira_usuario = st.text_input("Tickers da sua carteira (separados por v√≠rgula):")
        if carteira_usuario:
            tickers = [t.strip().upper() for t in carteira_usuario.split(',')]
            with st.spinner("Calculando aloca√ß√£o ideal com HRP..."):
                pesos = otimizar_carteira_hrp(tickers)
            if pesos is not None:
                df = pd.DataFrame({"Ticker": pesos.index, "Peso (%)": np.round(pesos.values * 100, 2)})
                st.dataframe(df.reset_index(drop=True))
            else:
                st.error("Erro na otimiza√ß√£o da carteira.")

    elif pagina == "\U0001F4B5 Sugest√£o de Aporte":
        st.subheader("Sugest√£o de Aporte com Base no Cen√°rio Atual")
        carteira_input = st.text_input("Digite os tickers da sua carteira:")
        if carteira_input:
            tickers = [t.strip().upper() for t in carteira_input.split(',')]
            macro = obter_macro()
            cenario = classificar_cenario_macro(macro)
            recomendadas = filtrar_ativos_validos(tickers, cenario, macro)
            if recomendadas:
                df = pd.DataFrame(recomendadas)
                st.dataframe(df[['ticker', 'setor', 'preco_atual', 'preco_alvo', 'favorecido', 'score']])
            else:
                st.warning("Nenhuma a√ß√£o recomendada com base no cen√°rio atual.")

    elif pagina == "‚úÖ Ranking de A√ß√µes":
        st.subheader("\U0001F3C6 Ranking de A√ß√µes da sua Carteira")
        carteira_input = st.text_input("Digite os tickers da sua carteira:")
        if carteira_input:
            tickers = [t.strip().upper() for t in carteira_input.split(',')]
            macro = obter_macro()
            cenario = classificar_cenario_macro(macro)
            ranking = filtrar_ativos_validos(tickers, cenario, macro)
            if ranking:
                df_ranking = pd.DataFrame(ranking)
                st.dataframe(df_ranking[['ticker', 'score', 'preco_atual', 'preco_alvo', 'setor', 'favorecido']])
            else:
                st.warning("Nenhum ativo ranqueado com os dados atuais.")

# ====== EXECU√á√ÉO ======
painel_inteligente()
