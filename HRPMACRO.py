import streamlit as st
import pandas as pd
import numpy as np
import requests
import yfinance as yf
from scipy.optimize import minimize
from sklearn.covariance import LedoitWolf
from scipy.spatial.distance import squareform
from scipy.cluster.hierarchy import linkage



setores_por_ticker = {
    # Bancos
    'ITUB4.SA': 'Bancos',
    'BBDC4.SA': 'Bancos',
    'SANB11.SA': 'Bancos',
    'BBAS3.SA': 'Bancos',
    'ABCB4.SA': 'Bancos',
    'BRSR6.SA': 'Bancos',
    'BMGB4.SA': 'Bancos',
    'BPAC11.SA': 'Bancos',

    # Seguradoras
    'BBSE3.SA': 'Seguradoras',
    'PSSA3.SA': 'Seguradoras',
    'SULA11.SA': 'Seguradoras',
    'CXSE3.SA': 'Seguradoras',

    # Bolsas e Servi√ßos Financeiros
    'B3SA3.SA': 'Bolsas e Servi√ßos Financeiros',
    'XPBR31.SA': 'Bolsas e Servi√ßos Financeiros',

    # Energia El√©trica
    'EGIE3.SA': 'Energia El√©trica',
    'CPLE6.SA': 'Energia El√©trica',
    'TAEE11.SA': 'Energia El√©trica',
    'CMIG4.SA': 'Energia El√©trica',
    'AURE3.SA': 'Energia El√©trica',
    'CPFE3.SA': 'Energia El√©trica',
    'AESB3.SA': 'Energia El√©trica',

    # Petr√≥leo, G√°s e Biocombust√≠veis
    'PETR4.SA': 'Petr√≥leo, G√°s e Biocombust√≠veis',
    'PRIO3.SA': 'Petr√≥leo, G√°s e Biocombust√≠veis',
    'RECV3.SA': 'Petr√≥leo, G√°s e Biocombust√≠veis',
    'RRRP3.SA': 'Petr√≥leo, G√°s e Biocombust√≠veis',
    'UGPA3.SA': 'Petr√≥leo, G√°s e Biocombust√≠veis',
    'VBBR3.SA': 'Petr√≥leo, G√°s e Biocombust√≠veis',

    # Minera√ß√£o e Siderurgia
    'VALE3.SA': 'Minera√ß√£o e Siderurgia',
    'CSNA3.SA': 'Minera√ß√£o e Siderurgia',
    'GGBR4.SA': 'Minera√ß√£o e Siderurgia',
    'CMIN3.SA': 'Minera√ß√£o e Siderurgia',
    'GOAU4.SA': 'Minera√ß√£o e Siderurgia',
    'BRAP4.SA': 'Minera√ß√£o e Siderurgia',

    # Ind√∫stria e Bens de Capital
    'WEGE3.SA': 'Ind√∫stria e Bens de Capital',
    'RANI3.SA': 'Ind√∫stria e Bens de Capital',
    'KLBN11.SA': 'Ind√∫stria e Bens de Capital',
    'SUZB3.SA': 'Ind√∫stria e Bens de Capital',
    'UNIP6.SA': 'Ind√∫stria e Bens de Capital',
    'KEPL3.SA': 'Ind√∫stria e Bens de Capital',

    # Agroneg√≥cio
    'AGRO3.SA': 'Agroneg√≥cio',
    'SLCE3.SA': 'Agroneg√≥cio',
    'SMTO3.SA': 'Agroneg√≥cio',
    'CAML3.SA': 'Agroneg√≥cio',

    # Sa√∫de
    'HAPV3.SA': 'Sa√∫de',
    'FLRY3.SA': 'Sa√∫de',
    'RDOR3.SA': 'Sa√∫de',
    'QUAL3.SA': 'Sa√∫de',
    'RADL3.SA': 'Sa√∫de',

    # Tecnologia
    'TOTS3.SA': 'Tecnologia',
    'POSI3.SA': 'Tecnologia',
    'LINX3.SA': 'Tecnologia',
    'LWSA3.SA': 'Tecnologia',

    # Consumo Discricion√°rio
    'MGLU3.SA': 'Consumo Discricion√°rio',
    'LREN3.SA': 'Consumo Discricion√°rio',
    'RENT3.SA': 'Consumo Discricion√°rio',
    'ARZZ3.SA': 'Consumo Discricion√°rio',
    'ALPA4.SA': 'Consumo Discricion√°rio',

    # Consumo B√°sico
    'ABEV3.SA': 'Consumo B√°sico',
    'NTCO3.SA': 'Consumo B√°sico',
    'PCAR3.SA': 'Consumo B√°sico',
    'MDIA3.SA': 'Consumo B√°sico',

    # Comunica√ß√£o
    'VIVT3.SA': 'Comunica√ß√£o',
    'TIMS3.SA': 'Comunica√ß√£o',
    'OIBR3.SA': 'Comunica√ß√£o',

    # Utilidades P√∫blicas
    'SBSP3.SA': 'Utilidades P√∫blicas',
    'SAPR11.SA': 'Utilidades P√∫blicas',
    'CSMG3.SA': 'Utilidades P√∫blicas',
    'ALUP11.SA': 'Utilidades P√∫blicas',
    'CPLE6.SA': 'Utilidades P√∫blicas',
}


setores_por_cenario = {
    "Expansionista": [
        'Consumo Discricion√°rio',
        'Tecnologia',
        'Ind√∫stria e Bens de Capital',
        'Agroneg√≥cio'
    ],
    "Neutro": [
        'Sa√∫de',
        'Bancos',
        'Seguradoras',
        'Bolsas e Servi√ßos Financeiros',
        'Utilidades P√∫blicas'
    ],
    "Restritivo": [
        'Energia El√©trica',
        'Petr√≥leo, G√°s e Biocombust√≠veis',
        'Minera√ß√£o e Siderurgia',
        'Consumo B√°sico',
        'Comunica√ß√£o'
    ]
}

empresas_exportadoras = [
    'VALE3.SA',  # Minera√ß√£o
    'SUZB3.SA',  # Celulose
    'KLBN11.SA', # Papel e Celulose
    'AGRO3.SA',  # Agroneg√≥cio
    'PRIO3.SA',  # Petr√≥leo
    'SLCE3.SA',  # Agroneg√≥cio
    'SMTO3.SA',  # A√ß√∫car e Etanol
    'CSNA3.SA',  # Siderurgia
    'GGBR4.SA',  # Siderurgia
    'CMIN3.SA',  # Minera√ß√£o
]



# Fun√ß√£o para obter dados do Banco Central

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Otimiza√ß√£o de Carteira Inteligente", layout="wide", initial_sidebar_state="expanded")

# ====== CABE√áALHO ======
st.title("\U0001F4C8 Otimiza√ß√£o e Sugest√£o de Carteira")
st.markdown("""
Este painel permite:
- **An√°lise macroecon√¥mica autom√°tica** com dados do BCB e do mercado.
- **Filtragem de a√ß√µes** com base em cen√°rio, pre√ßo-alvo e exporta√ß√£o.
- **Otimiza√ß√£o de carteira** via Sharpe e HRP.
---
""")

# ====== SIDEBAR ======
with st.sidebar:
    st.header("\U0001F9ED Navega√ß√£o")
    pagina = st.radio("Selecione a etapa:", [
        "\U0001F4CC Introdu√ß√£o",
        "\U0001F310 An√°lise Macroecon√¥mica",
        "\U0001F4C9 Otimiza√ß√£o da Carteira",
        "\U0001F4B5 Sugest√£o de Aporte",
        "\u2705 Ranking de A√ß√µes"
    ])
    st.markdown("---")
    st.caption("Desenvolvido por [Seu Nome] üíº")

# ====== FUN√á√ïES AUXILIARES (Defina estas fun√ß√µes em outro arquivo e importe) ======
# obter_macro()
def get_bcb(code):
    url = f"https://api.bcb.gov.br/dados/serie/bcdata.sgs.{code}/dados/ultimos/1?formato=json"
    try:
        r = requests.get(url)
        if r.status_code == 200:
            return float(r.json()[0]['valor'].replace(",", "."))
        else:
            st.warning(f"N√£o foi poss√≠vel obter o dado com c√≥digo {code} do BCB.")
            return None
    except Exception as e:
        st.error(f"Erro ao acessar dados do BCB (c√≥digo {code}): {e}")
        return None

# Fun√ß√£o para obter o pre√ßo atual do barril de petr√≥leo (WTI)
def obter_preco_petroleo():
    try:
        dados = yf.Ticker("CL=F").history(period="5d")
        if not dados.empty and 'Close' in dados.columns:
            return float(dados['Close'].dropna().iloc[-1])
        else:
            return None
    except Exception as e:
        st.error(f"Erro ao obter pre√ßo do petr√≥leo: {e}")
        return None

# Fun√ß√£o principal que re√∫ne os dados macroecon√¥micos
def obter_macro():
    return {
        "selic": get_bcb(432),       # Taxa Selic
        "ipca": get_bcb(433),        # IPCA
        "dolar": get_bcb(1),         # D√≥lar comercial
        "petroleo": obter_preco_petroleo()  # Pre√ßo do petr√≥leo WTI
    }

# Fun√ß√£o para classificar o cen√°rio macroecon√¥mico
def classificar_cenario_macro(m):
    if m['ipca'] > 5 or m['selic'] > 12:
        return "Restritivo"
    elif m['ipca'] < 4 and m['selic'] < 10:
        return "Expansionista"
    else:
        return "Neutro"

def obter_preco_atual(ticker):
    try:
        return yf.Ticker(ticker).history(period="1d")['Close'].iloc[-1]
    except:
        return None

# filtrar_ativos_validos(tickers, cenario, macro)
def filtrar_ativos_validos(carteira, cenario, macro):
    setores_bons = setores_por_cenario[cenario]
    ativos_validos = []

    for ticker in carteira:
        setor = setores_por_ticker.get(ticker, None)
        preco_atual = obter_preco_atual(ticker)
        preco_alvo = obter_preco_alvo(ticker)

        if preco_atual is None or preco_alvo is None:
            continue
        if preco_atual < preco_alvo:
            favorecido = setor in setores_bons
            score = calcular_score(preco_atual, preco_alvo, favorecido, ticker, macro)
            ativos_validos.append({
                "ticker": ticker,
                "setor": setor,
                "preco_atual": preco_atual,
                "preco_alvo": preco_alvo,
                "favorecido": favorecido,
                "score": score
            })

    ativos_validos.sort(key=lambda x: x['score'], reverse=True)
    return ativos_validos
    
# otimizar_carteira_sharpe(tickers)

def otimizar_carteira_sharpe(tickers):
    dados = obter_preco_diario_ajustado(tickers)
    retornos = dados.pct_change().dropna()
    media_retorno = retornos.mean()
    cov = LedoitWolf().fit(retornos).covariance_

    def sharpe_neg(pesos):
        retorno_esperado = np.dot(pesos, media_retorno)
        volatilidade = np.sqrt(np.dot(pesos.T, np.dot(cov, pesos)))
        return -retorno_esperado / volatilidade if volatilidade != 0 else 0

    n = len(tickers)
    pesos_iniciais = np.array([1/n] * n)
    limites = [(0, 1) for _ in range(n)]
    restricoes = {'type': 'eq', 'fun': lambda x: np.sum(x) - 1}

    resultado = minimize(sharpe_neg, pesos_iniciais, method='SLSQP', bounds=limites, constraints=restricoes)

    if resultado.success:
        return resultado.x
    else:
        return None

# otimizar_carteira_hrp(tickers)
def otimizar_carteira_hrp(tickers):
    dados = obter_preco_diario_ajustado(tickers)
    retornos = dados.pct_change().dropna()
    dist = np.sqrt(((1 - retornos.corr()) / 2).fillna(0))
    linkage_matrix = linkage(squareform(dist), method='single')

    def get_quasi_diag(link):
        link = link.astype(int)
        sort_ix = pd.Series([link[-1, 0], link[-1, 1]])
        num_items = link[-1, 3]
        while sort_ix.max() >= num_items:
            sort_ix.index = range(0, sort_ix.shape[0]*2, 2)
            df0 = sort_ix[sort_ix >= num_items]
            i = df0.index
            j = df0.values - num_items
            sort_ix[i] = link[j, 0]
            df1 = pd.Series(link[j, 1], index=i+1)
            sort_ix = pd.concat([sort_ix, df1])
            sort_ix = sort_ix.sort_index()
            sort_ix.index = range(sort_ix.shape[0])
        return sort_ix.tolist()

    sort_ix = get_quasi_diag(linkage_matrix)
    sorted_tickers = [retornos.columns[i] for i in sort_ix]
    cov = LedoitWolf().fit(retornos).covariance_
    ivp = 1. / np.diag(cov)
    ivp /= ivp.sum()

# ====== FUN√á√ÉO PRINCIPAL ======
def painel_inteligente():
    if pagina == "\U0001F4CC Introdu√ß√£o":
        st.subheader("Bem-vindo(a) √† Otimiza√ß√£o Inteligente de Carteira")
        st.markdown("""
        Este painel utiliza **dados macroecon√¥micos atualizados**, **pre√ßo-alvo dos analistas**, e t√©cnicas modernas como **Hierarchical Risk Parity (HRP)** e **Otimiza√ß√£o por Sharpe** para te ajudar a:

        - **Identificar oportunidades de compra**
        - **Sugerir aloca√ß√µes para novos aportes**
        - **Otimizar sua carteira com base no cen√°rio econ√¥mico atual**
        ---
        """)

    elif pagina == "\U0001F310 An√°lise Macroecon√¥mica":
        st.subheader("\U0001F30E Cen√°rio Macroecon√¥mico Atual")
        with st.spinner("Carregando dados macroecon√¥micos..."):
            macro = obter_macro()
            cenario = classificar_cenario_macro(macro)

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Selic", f"{macro['selic']:.2f}%")
        col2.metric("IPCA", f"{macro['ipca']:.2f}%")
        col3.metric("D√≥lar", f"R$ {macro['dolar']:.2f}")
        col4.metric("Petr√≥leo", f"US$ {macro['petroleo']:.2f}")

        st.success(f"Cen√°rio Macroecon√¥mico Classificado como: `{cenario}`")

    elif pagina == "\U0001F4C9 Otimiza√ß√£o da Carteira":
        st.subheader("\u2696\ufe0f Otimiza√ß√£o com HRP")
        carteira_usuario = st.text_input("Tickers da sua carteira (separados por v√≠rgula):")
        if carteira_usuario:
            tickers = [t.strip().upper() for t in carteira_usuario.split(',')]
            with st.spinner("Calculando aloca√ß√£o ideal com HRP..."):
                pesos = otimizar_carteira_hrp(tickers)
            if pesos is not None:
                df = pd.DataFrame({"Ticker": pesos.index, "Peso (%)": np.round(pesos.values * 100, 2)})
                st.dataframe(df.reset_index(drop=True))
            else:
                st.error("Erro na otimiza√ß√£o da carteira.")

    elif pagina == "\U0001F4B5 Sugest√£o de Aporte":
        st.subheader("Sugest√£o de Aporte com Base no Cen√°rio Atual")
        carteira_input = st.text_input("Digite os tickers da sua carteira:")
        if carteira_input:
            tickers = [t.strip().upper() for t in carteira_input.split(',')]
            macro = obter_macro()
            cenario = classificar_cenario_macro(macro)
            recomendadas = filtrar_ativos_validos(tickers, cenario, macro)
            if recomendadas:
                df = pd.DataFrame(recomendadas)
                st.dataframe(df[['ticker', 'setor', 'preco_atual', 'preco_alvo', 'favorecido', 'score']])
            else:
                st.warning("Nenhuma a√ß√£o recomendada com base no cen√°rio atual.")

    elif pagina == "‚úÖ Ranking de A√ß√µes":
        st.subheader("\U0001F3C6 Ranking de A√ß√µes da sua Carteira")
        carteira_input = st.text_input("Digite os tickers da sua carteira:")
        if carteira_input:
            tickers = [t.strip().upper() for t in carteira_input.split(',')]
            macro = obter_macro()
            cenario = classificar_cenario_macro(macro)
            ranking = filtrar_ativos_validos(tickers, cenario, macro)
            if ranking:
                df_ranking = pd.DataFrame(ranking)
                st.dataframe(df_ranking[['ticker', 'score', 'preco_atual', 'preco_alvo', 'setor', 'favorecido']])
            else:
                st.warning("Nenhum ativo ranqueado com os dados atuais.")

# ====== EXECU√á√ÉO ======
painel_inteligente()
