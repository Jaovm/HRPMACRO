import streamlit as st
import yfinance as yf
import pandas as pd
import requests

# --- Fun√ß√£o para simular an√°lise macroecon√¥mica ---
def analisar_cenario_macroeconomico():
    # Aqui voc√™ pode integrar com APIs como TradingEconomics, FRED, etc.
    # Por enquanto, vamos simular com base em dados fixos
    dados_macro = {
        "Selic": 10.75,
        "Infla√ß√£o (IPCA)": 4.1,
        "PIB": 2.2,
        "Emprego": "Est√°vel",
        "Cen√°rio geral": "Neutro-positivo"
    }
    return dados_macro

def avaliar_cenario(dados_macro):
    if dados_macro["Selic"] < 11 and dados_macro["Infla√ß√£o (IPCA)"] < 5:
        return "positivo"
    elif dados_macro["Selic"] > 13 or dados_macro["Infla√ß√£o (IPCA)"] > 6:
        return "negativo"
    else:
        return "neutro"

# --- Fun√ß√£o para obter pre√ßo atual do ativo ---
def obter_preco_atual(ticker):
    try:
        dados = yf.Ticker(ticker).history(period="1d")
        preco = dados["Close"].iloc[-1]
        return preco
    except:
        return None

# --- T√≠tulo ---
st.title("üìà An√°lise Macro + Sugest√µes de Compra")

# --- Entrada do usu√°rio ---
st.subheader("Carteira de Ativos")
with st.expander("üìã Insira sua carteira e pre√ßo teto por ativo"):
    carteira = st.text_area("Tickers (um por linha, formato: TICKER,PRE√áO_TETO)", 
                            "ITUB3.SA,32\nWEGE3.SA,40\nPRIO3.SA,48")
    carteira_dict = {}
    for linha in carteira.strip().split("\n"):
        try:
            ticker, teto = linha.split(",")
            carteira_dict[ticker.strip().upper()] = float(teto)
        except:
            st.warning(f"Linha inv√°lida: {linha}")

# --- An√°lise macroecon√¥mica ---
st.subheader("üåç Cen√°rio Macroecon√¥mico")
dados_macro = analisar_cenario_macroeconomico()
st.write(dados_macro)
cen√°rio = avaliar_cenario(dados_macro)
st.markdown(f"**Cen√°rio identificado: `{cen√°rio.upper()}`**")

# --- Sugest√µes de compra ---
st.subheader("üí° Sugest√µes de Compra")
if cen√°rio == "negativo":
    st.warning("O cen√°rio macroecon√¥mico atual n√£o √© favor√°vel. Sugest√£o: aguardar.")
else:
    sugestoes = []
    for ticker, preco_teto in carteira_dict.items():
        preco_atual = obter_preco_atual(ticker)
        if preco_atual is None:
            st.error(f"Erro ao obter pre√ßo de {ticker}")
            continue
        if preco_atual < preco_teto:
            sugestoes.append((ticker, preco_atual, preco_teto))
    
    if sugestoes:
        df_sugestoes = pd.DataFrame(sugestoes, columns=["Ticker", "Pre√ßo Atual", "Pre√ßo Teto"])
        st.success("Ativos com pre√ßo abaixo do teto:")
        st.dataframe(df_sugestoes)
    else:
        st.info("Nenhum ativo est√° abaixo do pre√ßo teto no momento.")

# --- Rodap√© ---
st.markdown("---")
st.caption("Desenvolvido com ‚ù§Ô∏è para investidores de longo prazo.")
